import astropy
from astropy.io import fits
import glob
from glob import glob
from shapely.geometry.polygon import Polygon
from shapely.geometry import MultiPolygon
from shapely.geometry.point import Point
from descartes import PolygonPatch
from astropy.coordinates import SkyCoord
from shapely.ops import cascaded_union, unary_union


matplotlib.rcParams['text.usetex'] = True
matplotlib.rcParams['axes.linewidth'] = 3

plt.close('all')
plt.ioff()





fp_dir = '/Volumes/gdrive/clear/footprints'


fits_fls = glob(fp_dir + '/*fits')

figN = figure()
figS = figure()
axN = figN.add_subplot(111)
axS = figS.add_subplot(111)



c0 = SkyCoord("3h33m00s -27d58m00s")
c1 = SkyCoord("3h32m00s -27d40m00s")





gds_dticks = ['-27d40m00s', '-27d45m00s', '-27d50m00s', '-27d50m00s', '-27d55m00s']
gds_aticks = ['3h32m00s', '3h32m30s', '3h33m00s', '3h33m30s']

gdn_dticks = ['+62d05m00s', '+62d10m00s', '+62d15m00s', '+62d20m00s', '+62d25m00s']
gdn_aticks = ['12h35m00s', '12h36m00s', '12h37m00s', '12h38m00s']




for ax, aticks, dticks, tit in [(axN,  gdn_aticks, gdn_dticks, 'GOODS-N'), (axS,  gds_aticks, gds_dticks,'GOODS-S')]:

    dt = [SkyCoord("3h33m00s %s"%g).dec.value for g in dticks]

    if tit == "GOODS-N": 
        at = [SkyCoord("%s -27d40m00s"%g).ra.value - 360. for g in aticks]
    else:
        at = [SkyCoord("%s -27d40m00s"%g).ra.value for g in aticks]





    dticklbls = ["$%s$"%dtick.replace('d', '^\circ').replace('m', '^m').replace('s','^s') for dtick in dticks]
    aticklbls = ["$%s$"%atick.replace('h', '^h').replace('m', '^m').replace('s','^s') for atick in aticks]

    ax.set_yticks(dt)
    ax.set_yticklabels(dticklbls)
    ax.set_xticks(at)
    ax.set_xticklabels(aticklbls)





for ax, c0, c1, tit in [(axS, SkyCoord("3h33m10s -27d58m00s"), SkyCoord("3h31m50s -27d38m00s"), 'GOODS-S'), (axN, SkyCoord("12h38m20s +62d04m45s"), SkyCoord("12h35m30s  +62d25m00s"), 'GOODS-N')]:


    yS0 = c0.dec.value
    yS1 = c1.dec.value

    if tit == "GOODS-N":
        xS0 = c0.ra.value - 360.
        xS1 = c1.ra.value - 360.

    if tit == "GOODS-S":
        xS0 = c0.ra.value
        xS1 = c1.ra.value


    ax.set_xlim(xS0, xS1)
    ax.set_ylim(yS1, yS0)
    ax.set_title(tit, fontsize = 30, pad = 15)





#old ones
cs = [("3h32m20s -27d57m00s"), ("3h33m05s -27d54m00s"), ("3h32m40s -27d42m00s"), ("3h32m00s -27d44m00s")]
goods_coords = [(SkyCoord(c).ra.value, SkyCoord(c).dec.value) for c in cs]



goods_coords = [[(53.253844,-27.661061),(53.227953,-27.686237),(53.260483,-27.711953),(53.285567,-27.686147)],
                [(53.146446,-27.865471),(53.132847,-27.833614),(53.092140,-27.847604),(53.106741,-27.879111)],
                [(53.172026,-27.691544),(53.133730,-27.688386),(53.130113,-27.726866),(53.168491,-27.729074)],
                [(53.092665,-27.715852),(53.054361,-27.712694),(53.050743,-27.751174),(53.089130,-27.753383)],
                [(53.160758,-27.896771),(53.147155,-27.864914),(53.106437,-27.878904),(53.121042,-27.910411)],
                [(53.215197,-27.914693),(53.201591,-27.882836),(53.160866,-27.896827),(53.175474,-27.928333)],
                [(53.135409,-27.942252),(53.121800,-27.910395),(53.081065,-27.924385),(53.095676,-27.955891)],
                [(53.175364,-27.928388),(53.161756,-27.896531),(53.121026,-27.910521),(53.135636,-27.942027)],
                [(53.128527,-27.742861),(53.090213,-27.739702),(53.086594,-27.778182),(53.124990,-27.780391)],
                [(53.165707,-27.750025),(53.168176,-27.784006),(53.211694,-27.781149),(53.208153,-27.747245)],
                [(53.043416,-27.824225),(53.045885,-27.858206),(53.089434,-27.855349),(53.085890,-27.821445)],
                [(53.040408,-27.790345),(53.042877,-27.824325),(53.086412,-27.821469),(53.082869,-27.787565)],
                [(53.085097,-27.812309),(53.087566,-27.846289),(53.131110,-27.843433),(53.127566,-27.809529)],
                [(53.200584,-27.883018),(53.186983,-27.851161),(53.146270,-27.865152),(53.160873,-27.896658)],
                [(53.254855,-27.901207),(53.241251,-27.869350),(53.200531,-27.883340),(53.215137,-27.914847)],
                [(53.049980,-27.768050),(53.015004,-27.782267),(53.033618,-27.817193),(53.068129,-27.802117)],
                [(53.208351,-27.715639),(53.170046,-27.712480),(53.166428,-27.750960),(53.204815,-27.753169)],
                [(53.127254,-27.669806),(53.129720,-27.703786),(53.173207,-27.700930),(53.169668,-27.667026)],
                [(53.132156,-27.705400),(53.093855,-27.702241),(53.090237,-27.740721),(53.128620,-27.742930)],
                [(53.082352,-27.778275),(53.084821,-27.812256),(53.128351,-27.809399),(53.124809,-27.775495)],
                [(53.123970,-27.763973),(53.126438,-27.797953),(53.169962,-27.795096),(53.166420,-27.761193)],
                [(53.168537,-27.729019),(53.130228,-27.725861),(53.126609,-27.764341),(53.165001,-27.766549)],
                [(53.085677,-27.683592),(53.088144,-27.717572),(53.131636,-27.714716),(53.128097,-27.680812)],
                [(53.186508,-27.851630),(53.172910,-27.819772),(53.132209,-27.833763),(53.146808,-27.865269)],
                [(53.117080,-27.914693),(53.103474,-27.882836),(53.062750,-27.896827),(53.077357,-27.928333)],
                [(53.124592,-27.795573),(53.127061,-27.829553),(53.170598,-27.826696),(53.167055,-27.792793)],
                [(53.167125,-27.784323),(53.169594,-27.818303),(53.213126,-27.815446),(53.209584,-27.781543)],
                [(53.089071,-27.753161),(53.050753,-27.750002),(53.047134,-27.788482),(53.085534,-27.790691)],
                [(53.016930,-27.744426),(53.054140,-27.735798),(53.042672,-27.698543),(53.005752,-27.708089)],
                [(53.028220,-27.783186),(53.062602,-27.767899),(53.042628,-27.733569),(53.008745,-27.749701)],
                [(53.066424,-27.890689),(53.104925,-27.889692),(53.103216,-27.851108),(53.064764,-27.853057)],
                [(53.224984,-27.840796),(53.215228,-27.807857),(53.173101,-27.818009),(53.183895,-27.850692)],
                [(53.303424,-27.849997),(53.271617,-27.830798),(53.247348,-27.862901),(53.279749,-27.881305)],
                [(53.240651,-27.869538),(53.227051,-27.837681),(53.186343,-27.851671),(53.200945,-27.883177)]]



#gds_p = Polygon(goods_coords)
#patch = PolygonPatch(gds_p, fc='grey', ec='black', alpha = 0.2, zorder=1)
#axS.add_patch(patch)

gds_p = cascaded_union(MultiPolygon([Polygon(gds_coord) for gds_coord in goods_coords]))
patch = PolygonPatch(gds_p, fc='grey', ec='black', alpha = 0.2, zorder=1)
axS.add_patch(patch)








cs = [("12h38m10s +62d15m00s"), ("12h37m00s +62d22m00s"), ("12h35m40s +62d10m00s"), (" 12h36m30s +62d05m00s")]
goodn_coords = [(SkyCoord(c).ra.value-360., SkyCoord(c).dec.value) for c in cs]



goodn_coords = [[(188.993160-360., 62.172507),(189.030550-360., 62.201734),(188.959032-360., 62.221146),(188.923459-360., 62.191427)],
                [(189.041309-360., 62.194782),(189.078223-360., 62.224148),(189.006320-360., 62.243293),(188.971234-360., 62.213441)],
                [(189.089070-360., 62.217032),(189.126012-360., 62.246398),(189.054055-360., 62.265543),(189.018943-360., 62.235691)],
                [(189.139822-360., 62.239687),(189.173093-360., 62.269996),(189.098828-360., 62.287176),(189.067451-360., 62.256430)],
                [(189.184466-360., 62.261505),(189.221463-360., 62.290871),(189.149400-360., 62.310015),(189.114236-360., 62.280163)],
                [(189.224929-360., 62.334449),(189.166375-360., 62.313976),(189.217001-360., 62.283400),(189.274271-360., 62.304603)],
                [(189.273891-360., 62.356590),(189.214345-360., 62.336717),(189.263561-360., 62.305634),(189.321854-360., 62.326251)],
                [(189.319660-360., 62.378937),(189.261613-360., 62.358104),(189.313185-360., 62.327842),(189.369928-360., 62.349398)],
                [(189.048036-360., 62.147199),(189.084893-360., 62.176565),(189.013103-360., 62.195710),(188.978072-360., 62.165858)],
                [(189.095755-360., 62.169421),(189.132639-360., 62.198787),(189.060796-360., 62.217932),(189.025739-360., 62.188080)],
                [(189.149002-360., 62.192488),(189.179131-360., 62.223491),(189.103331-360., 62.239028),(189.075140-360., 62.207630)],
                [(189.191193-360., 62.213894),(189.228131-360., 62.243260),(189.156182-360., 62.262404),(189.121074-360., 62.232552)],
                [(189.238912-360., 62.236116),(189.275878-360., 62.265482),(189.203875-360., 62.284626),(189.168741-360., 62.254774)],
                [(189.283487-360., 62.308738),(189.221887-360., 62.290331),(189.267480-360., 62.258100),(189.327909-360., 62.277279)],
                [(189.332135-360., 62.330893),(189.269821-360., 62.312978),(189.314260-360., 62.280390),(189.375426-360., 62.299087)],
                [(189.379764-360., 62.353125),(189.317467-360., 62.335163),(189.362052-360., 62.302608),(189.423199-360., 62.321352)],
                [(189.102483-360., 62.121810),(189.139308-360., 62.151176),(189.067578-360., 62.170321),(189.032576-360., 62.140469)],
                [(189.150243-360., 62.144032),(189.187095-360., 62.173398),(189.115313-360., 62.192543),(189.080286-360., 62.162691)],
                [(189.197920-360., 62.166282),(189.234800-360., 62.195648),(189.162965-360., 62.214793),(189.127912-360., 62.184941)],
                [(189.245681-360., 62.188505),(189.282588-360., 62.217871),(189.210699-360., 62.237015),(189.175621-360., 62.207163)],
                [(189.286708-360., 62.261414),(189.227863-360., 62.241212),(189.277713-360., 62.210404),(189.335292-360., 62.231342)],
                [(189.341077-360., 62.232977),(189.378039-360., 62.262343),(189.306044-360., 62.281487),(189.270914-360., 62.251636)],
                [(189.128256-360., 62.096387),(189.191491-360., 62.113221),(189.149924-360., 62.146554),(189.087682-360., 62.128882)],
                [(189.204689-360., 62.118671),(189.241511-360., 62.148037),(189.169789-360., 62.167182),(189.134791-360., 62.137330)],
                [(189.252367-360., 62.140893),(189.289215-360., 62.170260),(189.217440-360., 62.189404),(189.182416-360., 62.159552)],
                [(189.296421-360., 62.162711),(189.337518-360., 62.190829),(189.268675-360., 62.212225),(189.229320-360., 62.183564)],
                [(189.336107-360., 62.184499),(189.385510-360., 62.209552),(189.323980-360., 62.235365),(189.276114-360., 62.209659)],
                [(189.395565-360., 62.207588),(189.432496-360., 62.236954),(189.360561-360., 62.256099),(189.325460-360., 62.226247)]]
'''
gdn_p = Point(goodn_coords[0]).buffer(0.01)

for gdn_coord in goodn_coords:
    print gdn_coord
    p_i = Point(gdn_coord).buffer(0.01)
    gdn_p.union(p_i)
'''
gdn_p = cascaded_union(MultiPolygon([Polygon(gdn_coord) for gdn_coord in goodn_coords]))
#uinion(gdn_p)


patch = PolygonPatch(gdn_p, fc='grey', ec='black', alpha = 0.2, zorder=1)
axN.add_patch(patch)




for f in fits_fls:
    b = fits.open(f)
    footprints = b[1].data['footprint']
    BLUE = '#6699cc'
    for i, fp in enumerate(footprints):
        flt = b[1].data['filter'][i]
        if flt.startswith('G'):

            exptime = b[1].data['exptime'][i]/60./60.
            fp_s = fp.strip('POLYGON')
            l = []
            fp_split = fp_s.split(' ')
            try:
                fp_split= fp_split[1:len(fp_split)]
                coords = [(float(fp_split[2*i]), float(fp_split[2*i+1])) for i in arange(len(fp_split)/2)]
            except:
                fp_split= fp_split[2:len(fp_split)]
                coords = [(float(fp_split[2*i]), float(fp_split[2*i+1])) for i in arange(len(fp_split)/2)]
            p = Polygon(coords)
            if coords[0][1] >0:

                if flt == 'G102': clr = 'darkblue'
                elif flt == 'G141': clr = 'darkred'
                patch = PolygonPatch(p, fc=clr, ec='black', alpha=min(exptime/24., 0.8), zorder=2)
                axN.add_patch(patch)

            if coords[0][1] < 0:
                if flt == 'G102': clr = 'darkblue'
                elif flt == 'G141': clr = 'darkred'
                patch = PolygonPatch(p, fc=clr, ec='black', alpha=min(exptime/24., 0.8), zorder=2)
                axS.add_patch(patch)



        #x, y = p.exterior.xy
        #ax.plot(x, y, color='#6699cc', alpha=0.7,
        #    linewidth=3, solid_capstyle='round', zorder=2)


for ax, fig in [(axN, figN), (axS, figS)]:


    xr, yr = ax.get_xlim(), ax.get_ylim() 
    dx = (xr[1]-xr[0])*np.cos(yr[0]/180*np.pi)*60
    dy = (yr[1]-yr[0])*60
    ax.set_xlim(ax.get_xlim()[::-1])
    fig.set_size_inches(5,5*dy/dx)

    fig.subplots_adjust(left = 0.20, right = 0.95)



for ax in [axN, axS]:
    fs = 20
    ax.annotate('3D-HST WFC3', (0.06, 0.03), color = 'grey', xycoords = 'axes fraction', fontsize = fs)
    ax.annotate('G102', (0.06, 0.15), color = 'darkblue', fontweight = 'bold', xycoords = 'axes fraction', fontsize = fs)
    ax.annotate('G141',(0.06, 0.09),  color = 'darkred',  fontweight = 'bold',xycoords = 'axes fraction', fontsize = fs)
fig_dir = '/Volumes/gdrive/clear/figures'
figN.savefig(fig_dir + '/coverage_goodsN.png', dpi = 600)
figS.savefig(fig_dir + '/coverage_goodsS.png', dpi = 600)




'''
'''